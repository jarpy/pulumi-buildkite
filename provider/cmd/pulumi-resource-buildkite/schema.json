{
    "name": "buildkite",
    "description": "A Pulumi package for creating and managing buildkite cloud resources.",
    "keywords": [
        "pulumi",
        "buildkite",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`buildkite` Terraform Provider](https://github.com/buildkite/terraform-provider-buildkite).",
    "repository": "https://github.com/jarpy/pulumi-buildkite",
    "publisher": "Jarpy",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apiToken": {
                "type": "string",
                "description": "API token with GraphQL access and `write_pipelines, read_pipelines` scopes\n"
            },
            "organization": {
                "type": "string",
                "description": "The Buildkite organization ID\n"
            }
        },
        "defaults": [
            "apiToken",
            "organization"
        ]
    },
    "types": {
        "buildkite:index/PipelineProviderSettings:PipelineProviderSettings": {
            "properties": {
                "buildBranches": {
                    "type": "boolean",
                    "description": "Whether to create builds when branches are pushed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildPullRequestForks": {
                    "type": "boolean",
                    "description": "Whether to create builds for pull requests from third-party forks.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildPullRequestLabelsChanged": {
                    "type": "boolean",
                    "description": "Whether to create builds for pull requests when labels are added or removed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildPullRequestReadyForReview": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildPullRequests": {
                    "type": "boolean",
                    "description": "Whether to create builds for commits that are part of a Pull Request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "buildTags": {
                    "type": "boolean",
                    "description": "Whether to create builds when tags are pushed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cancelDeletedBranchBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically cancelling any running builds for a branch if the branch is deleted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterCondition": {
                    "type": "string",
                    "description": "The condition to evaluate when deciding if a build should run. More details available in [the documentation](https://buildkite.com/docs/pipelines/conditionals#conditionals-in-pipelines)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filterEnabled": {
                    "type": "boolean",
                    "description": "[true/false] Whether to filter builds to only run when the condition in `filter_condition` is true\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefixPullRequestForkBranchNames": {
                    "type": "boolean",
                    "description": "Prefix branch names for third-party fork builds to ensure they don't trigger branch conditions. For example, the `master` branch from `some-user` will become `some-user:master`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishBlockedAsPending": {
                    "type": "boolean",
                    "description": "The status to use for blocked builds. Pending can be used with [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) to prevent merging pull requests with blocked builds.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishCommitStatus": {
                    "type": "boolean",
                    "description": "Whether to update the status of commits in Bitbucket or GitHub.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publishCommitStatusPerStep": {
                    "type": "boolean",
                    "description": "Whether to create a separate status for each job in a build, allowing you to see the status of each job directly in Bitbucket or GitHub.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pullRequestBranchFilterConfiguration": {
                    "type": "string",
                    "description": "The branch filtering pattern. Only pull requests on branches matching this pattern will cause builds to be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pullRequestBranchFilterEnabled": {
                    "type": "boolean",
                    "description": "Whether to limit the creation of builds to specific branches or patterns.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "separatePullRequestStatuses": {
                    "type": "boolean",
                    "description": "Whether to create a separate status for pull request builds, allowing you to require a passing pull request build in your [required status checks](https://help.github.com/en/articles/enabling-required-status-checks) in GitHub.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "skipPullRequestBuildsForExistingCommits": {
                    "type": "boolean",
                    "description": "Whether to skip creating a new build for a pull request if an existing build for the commit and branch already exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerMode": {
                    "type": "string",
                    "description": "What type of event to trigger builds on. Must be one of:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "buildBranches",
                        "buildPullRequestForks",
                        "buildPullRequestLabelsChanged",
                        "buildPullRequestReadyForReview",
                        "buildPullRequests",
                        "buildTags",
                        "cancelDeletedBranchBuilds",
                        "filterCondition",
                        "filterEnabled",
                        "prefixPullRequestForkBranchNames",
                        "publishBlockedAsPending",
                        "publishCommitStatus",
                        "publishCommitStatusPerStep",
                        "pullRequestBranchFilterConfiguration",
                        "pullRequestBranchFilterEnabled",
                        "separatePullRequestStatuses",
                        "skipPullRequestBuildsForExistingCommits",
                        "triggerMode"
                    ]
                }
            }
        },
        "buildkite:index/PipelineTeam:PipelineTeam": {
            "properties": {
                "accessLevel": {
                    "type": "string",
                    "description": "The level of access to grant. Must be one of `READ_ONLY`, `BUILD_AND_READ` or `MANAGE_BUILD_AND_READ`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The buildkite slug of the team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accessLevel",
                "slug"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the buildkite package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiToken": {
                "type": "string",
                "description": "API token with GraphQL access and `write_pipelines, read_pipelines` scopes\n"
            },
            "organization": {
                "type": "string",
                "description": "The Buildkite organization ID\n"
            }
        },
        "required": [
            "apiToken",
            "organization"
        ],
        "inputProperties": {
            "apiToken": {
                "type": "string",
                "description": "API token with GraphQL access and `write_pipelines, read_pipelines` scopes\n"
            },
            "organization": {
                "type": "string",
                "description": "The Buildkite organization ID\n"
            }
        },
        "requiredInputs": [
            "apiToken",
            "organization"
        ]
    },
    "resources": {
        "buildkite:index/agentToken:AgentToken": {
            "description": "## # Resource: agent_token\n\nThis resource allows you to create and manage agent tokens.\n\nBuildkite Documentation: https://buildkite.com/docs/agent/v3/tokens\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst fleet = new buildkite.AgentToken(\"fleet\", {\n    description: \"token used by build fleet\",\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nfleet = buildkite.AgentToken(\"fleet\", description=\"token used by build fleet\")\n```\n```csharp\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fleet = new Buildkite.AgentToken(\"fleet\", new Buildkite.AgentTokenArgs\n        {\n            Description = \"token used by build fleet\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := buildkite.NewAgentToken(ctx, \"fleet\", \u0026buildkite.AgentTokenArgs{\n\t\t\tDescription: pulumi.String(\"token used by build fleet\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTokens can be imported using the `GraphQL ID` (not UUID), e.g.\n\n```sh\n $ pulumi import buildkite:index/agentToken:AgentToken fleet QWdlbnRUb2tlbi0tLTQzNWNhZDU4LWU4MWQtNDVhZi04NjM3LWIxY2Y4MDcwMjM4ZA==\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "This is the description of the agent token.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The value of the created agent token.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of the token.\n"
                }
            },
            "required": [
                "token",
                "uuid"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "This is the description of the agent token.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AgentToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "This is the description of the agent token.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "The value of the created agent token.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the token.\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:index/pipeline:Pipeline": {
            "description": "## # Resource: pipeline\n\nThis resource allows you to create and manage pipelines for repositories.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\nimport * from \"fs\";\n\n// in ./steps.yml:\n// steps:\n//   - label: ':pipeline:'\n//     command: buildkite-agent pipeline upload\nconst repo2 = new buildkite.Pipeline(\"repo2\", {\n    repository: \"git@github.com:org/repo2\",\n    steps: fs.readFileSync(\"./steps.yml\"),\n    teams: [{\n        slug: \"everyone\",\n        accessLevel: \"READ_ONLY\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\n# in ./steps.yml:\n# steps:\n#   - label: ':pipeline:'\n#     command: buildkite-agent pipeline upload\nrepo2 = buildkite.Pipeline(\"repo2\",\n    repository=\"git@github.com:org/repo2\",\n    steps=(lambda path: open(path).read())(\"./steps.yml\"),\n    teams=[buildkite.PipelineTeamArgs(\n        slug=\"everyone\",\n        access_level=\"READ_ONLY\",\n    )])\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // in ./steps.yml:\n        // steps:\n        //   - label: ':pipeline:'\n        //     command: buildkite-agent pipeline upload\n        var repo2 = new Buildkite.Pipeline(\"repo2\", new Buildkite.PipelineArgs\n        {\n            Repository = \"git@github.com:org/repo2\",\n            Steps = File.ReadAllText(\"./steps.yml\"),\n            Teams = \n            {\n                new Buildkite.Inputs.PipelineTeamArgs\n                {\n                    Slug = \"everyone\",\n                    AccessLevel = \"READ_ONLY\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := buildkite.NewPipeline(ctx, \"repo2\", \u0026buildkite.PipelineArgs{\n\t\t\tRepository: pulumi.String(\"git@github.com:org/repo2\"),\n\t\t\tSteps:      readFileOrPanic(\"./steps.yml\"),\n\t\t\tTeams: PipelineTeamArray{\n\t\t\t\t\u0026PipelineTeamArgs{\n\t\t\t\t\tSlug:        pulumi.String(\"everyone\"),\n\t\t\t\t\tAccessLevel: pulumi.String(\"READ_ONLY\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### With GitHub Provider Settings\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\nimport * from \"fs\";\n\n// Pipeline that should not be triggered from a GitHub webhook\nconst repo2_deploy = new buildkite.Pipeline(\"repo2-deploy\", {\n    repository: \"git@github.com:org/repo2\",\n    steps: fs.readFileSync(\"./deploy-steps.yml\"),\n    providerSettings: {\n        triggerMode: \"none\",\n    },\n});\n// Release pipeline (triggered only when tags are pushed)\nconst repo2_release = new buildkite.Pipeline(\"repo2-release\", {\n    repository: \"git@github.com:org/repo2\",\n    steps: fs.readFileSync(\"./release-steps.yml\"),\n    providerSettings: {\n        buildBranches: false,\n        buildTags: true,\n        buildPullRequests: false,\n        triggerMode: \"code\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\n# Pipeline that should not be triggered from a GitHub webhook\nrepo2_deploy = buildkite.Pipeline(\"repo2-deploy\",\n    repository=\"git@github.com:org/repo2\",\n    steps=(lambda path: open(path).read())(\"./deploy-steps.yml\"),\n    provider_settings=buildkite.PipelineProviderSettingsArgs(\n        trigger_mode=\"none\",\n    ))\n# Release pipeline (triggered only when tags are pushed)\nrepo2_release = buildkite.Pipeline(\"repo2-release\",\n    repository=\"git@github.com:org/repo2\",\n    steps=(lambda path: open(path).read())(\"./release-steps.yml\"),\n    provider_settings=buildkite.PipelineProviderSettingsArgs(\n        build_branches=False,\n        build_tags=True,\n        build_pull_requests=False,\n        trigger_mode=\"code\",\n    ))\n```\n```csharp\nusing System.IO;\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Pipeline that should not be triggered from a GitHub webhook\n        var repo2_deploy = new Buildkite.Pipeline(\"repo2-deploy\", new Buildkite.PipelineArgs\n        {\n            Repository = \"git@github.com:org/repo2\",\n            Steps = File.ReadAllText(\"./deploy-steps.yml\"),\n            ProviderSettings = new Buildkite.Inputs.PipelineProviderSettingsArgs\n            {\n                TriggerMode = \"none\",\n            },\n        });\n        // Release pipeline (triggered only when tags are pushed)\n        var repo2_release = new Buildkite.Pipeline(\"repo2-release\", new Buildkite.PipelineArgs\n        {\n            Repository = \"git@github.com:org/repo2\",\n            Steps = File.ReadAllText(\"./release-steps.yml\"),\n            ProviderSettings = new Buildkite.Inputs.PipelineProviderSettingsArgs\n            {\n                BuildBranches = false,\n                BuildTags = true,\n                BuildPullRequests = false,\n                TriggerMode = \"code\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := buildkite.NewPipeline(ctx, \"repo2-deploy\", \u0026buildkite.PipelineArgs{\n\t\t\tRepository: pulumi.String(\"git@github.com:org/repo2\"),\n\t\t\tSteps:      readFileOrPanic(\"./deploy-steps.yml\"),\n\t\t\tProviderSettings: \u0026PipelineProviderSettingsArgs{\n\t\t\t\tTriggerMode: pulumi.String(\"none\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = buildkite.NewPipeline(ctx, \"repo2-release\", \u0026buildkite.PipelineArgs{\n\t\t\tRepository: pulumi.String(\"git@github.com:org/repo2\"),\n\t\t\tSteps:      readFileOrPanic(\"./release-steps.yml\"),\n\t\t\tProviderSettings: \u0026PipelineProviderSettingsArgs{\n\t\t\t\tBuildBranches:     pulumi.Bool(false),\n\t\t\t\tBuildTags:         pulumi.Bool(true),\n\t\t\t\tBuildPullRequests: pulumi.Bool(false),\n\t\t\t\tTriggerMode:       pulumi.String(\"code\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipelines can be imported using the `GraphQL ID` (not UUID), e.g.\n\n```sh\n $ pulumi import buildkite:index/pipeline:Pipeline fleet UGlwZWxpbmUtLS00MzVjYWQ1OC1lODFkLTQ1YWYtODYzNy1iMWNmODA3MDIzOGQ=\n```\n\n ",
            "properties": {
                "badgeUrl": {
                    "type": "string",
                    "description": "The pipeline's last build status so you can display build status badge.\n"
                },
                "branchConfiguration": {
                    "type": "string",
                    "description": "Limit which branches and tags cause new builds to be created, either via a code push or via the Builds REST API.\n"
                },
                "cancelIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically cancelling any running builds on the same branch when a new build is created.\n"
                },
                "cancelIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build cancelling applies to, for example !master will ensure that the master branch won't have it's builds automatically cancelled.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the pipeline.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the pipeline.\n"
                },
                "providerSettings": {
                    "$ref": "#/types/buildkite:index/PipelineProviderSettings:PipelineProviderSettings",
                    "description": "Source control provider settings for the pipeline. See Provider Settings Configuration below for details.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The git URL of the repository.\n"
                },
                "skipIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically skipping any unstarted builds on the same branch when a new build is created.\n"
                },
                "skipIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build skipping applies to, for example `!master` will ensure that the master branch won't have it's builds automatically skipped.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The buildkite slug of the team.\n"
                },
                "steps": {
                    "type": "string",
                    "description": "The string YAML steps to run the pipeline.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/buildkite:index/PipelineTeam:PipelineTeam"
                    },
                    "description": "Set team access for the pipeline. Can be specified multiple times for each team. See Teams Configuration below for details.\n"
                },
                "webhookUrl": {
                    "type": "string",
                    "description": "The Buildkite webhook URL to configure on the repository to trigger builds on this pipeline.\n"
                }
            },
            "required": [
                "badgeUrl",
                "branchConfiguration",
                "cancelIntermediateBuilds",
                "cancelIntermediateBuildsBranchFilter",
                "defaultBranch",
                "description",
                "name",
                "providerSettings",
                "repository",
                "skipIntermediateBuilds",
                "skipIntermediateBuildsBranchFilter",
                "slug",
                "steps",
                "webhookUrl"
            ],
            "inputProperties": {
                "branchConfiguration": {
                    "type": "string",
                    "description": "Limit which branches and tags cause new builds to be created, either via a code push or via the Builds REST API.\n"
                },
                "cancelIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically cancelling any running builds on the same branch when a new build is created.\n"
                },
                "cancelIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build cancelling applies to, for example !master will ensure that the master branch won't have it's builds automatically cancelled.\n"
                },
                "defaultBranch": {
                    "type": "string",
                    "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the pipeline.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the pipeline.\n"
                },
                "providerSettings": {
                    "$ref": "#/types/buildkite:index/PipelineProviderSettings:PipelineProviderSettings",
                    "description": "Source control provider settings for the pipeline. See Provider Settings Configuration below for details.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "The git URL of the repository.\n"
                },
                "skipIntermediateBuilds": {
                    "type": "boolean",
                    "description": "A boolean to enable automatically skipping any unstarted builds on the same branch when a new build is created.\n"
                },
                "skipIntermediateBuildsBranchFilter": {
                    "type": "string",
                    "description": "Limit which branches build skipping applies to, for example `!master` will ensure that the master branch won't have it's builds automatically skipped.\n"
                },
                "steps": {
                    "type": "string",
                    "description": "The string YAML steps to run the pipeline.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/buildkite:index/PipelineTeam:PipelineTeam"
                    },
                    "description": "Set team access for the pipeline. Can be specified multiple times for each team. See Teams Configuration below for details.\n"
                }
            },
            "requiredInputs": [
                "repository",
                "steps"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Pipeline resources.\n",
                "properties": {
                    "badgeUrl": {
                        "type": "string",
                        "description": "The pipeline's last build status so you can display build status badge.\n"
                    },
                    "branchConfiguration": {
                        "type": "string",
                        "description": "Limit which branches and tags cause new builds to be created, either via a code push or via the Builds REST API.\n"
                    },
                    "cancelIntermediateBuilds": {
                        "type": "boolean",
                        "description": "A boolean to enable automatically cancelling any running builds on the same branch when a new build is created.\n"
                    },
                    "cancelIntermediateBuildsBranchFilter": {
                        "type": "string",
                        "description": "Limit which branches build cancelling applies to, for example !master will ensure that the master branch won't have it's builds automatically cancelled.\n"
                    },
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the pipeline.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline.\n"
                    },
                    "providerSettings": {
                        "$ref": "#/types/buildkite:index/PipelineProviderSettings:PipelineProviderSettings",
                        "description": "Source control provider settings for the pipeline. See Provider Settings Configuration below for details.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The git URL of the repository.\n"
                    },
                    "skipIntermediateBuilds": {
                        "type": "boolean",
                        "description": "A boolean to enable automatically skipping any unstarted builds on the same branch when a new build is created.\n"
                    },
                    "skipIntermediateBuildsBranchFilter": {
                        "type": "string",
                        "description": "Limit which branches build skipping applies to, for example `!master` will ensure that the master branch won't have it's builds automatically skipped.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The buildkite slug of the team.\n"
                    },
                    "steps": {
                        "type": "string",
                        "description": "The string YAML steps to run the pipeline.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/buildkite:index/PipelineTeam:PipelineTeam"
                        },
                        "description": "Set team access for the pipeline. Can be specified multiple times for each team. See Teams Configuration below for details.\n"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The Buildkite webhook URL to configure on the repository to trigger builds on this pipeline.\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:index/pipelineSchedule:PipelineSchedule": {
            "description": "## # Resource: pipeline_schedule\n\nThis resource allows you to create and manage pipeline schedules.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines/scheduled-builds\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst repo2Nightly = new buildkite.PipelineSchedule(\"repo2Nightly\", {\n    pipelineId: buildkite_pipeline.repo2.id,\n    label: \"Nightly build\",\n    cronline: \"@midnight\",\n    branch: buildkite_pipeline.repo2.default_branch,\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nrepo2_nightly = buildkite.PipelineSchedule(\"repo2Nightly\",\n    pipeline_id=buildkite_pipeline[\"repo2\"][\"id\"],\n    label=\"Nightly build\",\n    cronline=\"@midnight\",\n    branch=buildkite_pipeline[\"repo2\"][\"default_branch\"])\n```\n```csharp\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repo2Nightly = new Buildkite.PipelineSchedule(\"repo2Nightly\", new Buildkite.PipelineScheduleArgs\n        {\n            PipelineId = buildkite_pipeline.Repo2.Id,\n            Label = \"Nightly build\",\n            Cronline = \"@midnight\",\n            Branch = buildkite_pipeline.Repo2.Default_branch,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := buildkite.NewPipelineSchedule(ctx, \"repo2Nightly\", \u0026buildkite.PipelineScheduleArgs{\n\t\t\tPipelineId: pulumi.Any(buildkite_pipeline.Repo2.Id),\n\t\t\tLabel:      pulumi.String(\"Nightly build\"),\n\t\t\tCronline:   pulumi.String(\"@midnight\"),\n\t\t\tBranch:     pulumi.Any(buildkite_pipeline.Repo2.Default_branch),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPipeline schedules can be imported using a slug (which consists of `$BUILDKITE_ORGANIZATION_SLUG/$BUILDKITE_PIPELINE_SLUG/$PIPELINE_SCHEDULE_UUID`), e.g.\n\n```sh\n $ pulumi import buildkite:index/pipelineSchedule:PipelineSchedule test myorg/test/1be3e7c7-1e03-4011-accf-b2d8eec90222\n```\n\n ",
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch to use for the build.\n"
                },
                "commit": {
                    "type": "string",
                    "description": "The commit ref to use for the build.\n"
                },
                "cronline": {
                    "type": "string",
                    "description": "Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the schedule should run.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variables to use for the build.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Schedule label.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to use for the build.\n"
                },
                "pipelineId": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID of the pipeline schedule\n"
                }
            },
            "required": [
                "branch",
                "cronline",
                "label",
                "message",
                "pipelineId",
                "uuid"
            ],
            "inputProperties": {
                "branch": {
                    "type": "string",
                    "description": "The branch to use for the build.\n"
                },
                "commit": {
                    "type": "string",
                    "description": "The commit ref to use for the build.\n"
                },
                "cronline": {
                    "type": "string",
                    "description": "Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the schedule should run.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of environment variables to use for the build.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Schedule label.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to use for the build.\n"
                },
                "pipelineId": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "branch",
                "cronline",
                "label",
                "pipelineId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PipelineSchedule resources.\n",
                "properties": {
                    "branch": {
                        "type": "string",
                        "description": "The branch to use for the build.\n"
                    },
                    "commit": {
                        "type": "string",
                        "description": "The commit ref to use for the build.\n"
                    },
                    "cronline": {
                        "type": "string",
                        "description": "Schedule interval (see [docs](https://buildkite.com/docs/pipelines/scheduled-builds#schedule-intervals)).\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the schedule should run.\n"
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of environment variables to use for the build.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Schedule label.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The message to use for the build.\n"
                    },
                    "pipelineId": {
                        "type": "string"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID of the pipeline schedule\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:index/team:Team": {
            "description": "## # Resource: team\n\nThis resource allows you to create and manage teams.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines/permissions\n\nNote: You must first enable Teams on your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst team = new buildkite.Team(\"team\", {\n    defaultMemberRole: \"MEMBER\",\n    defaultTeam: true,\n    privacy: \"VISIBLE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nteam = buildkite.Team(\"team\",\n    default_member_role=\"MEMBER\",\n    default_team=True,\n    privacy=\"VISIBLE\")\n```\n```csharp\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var team = new Buildkite.Team(\"team\", new Buildkite.TeamArgs\n        {\n            DefaultMemberRole = \"MEMBER\",\n            DefaultTeam = true,\n            Privacy = \"VISIBLE\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := buildkite.NewTeam(ctx, \"team\", \u0026buildkite.TeamArgs{\n\t\t\tDefaultMemberRole: pulumi.String(\"MEMBER\"),\n\t\t\tDefaultTeam:       pulumi.Bool(true),\n\t\t\tPrivacy:           pulumi.String(\"VISIBLE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "defaultMemberRole": {
                    "type": "string",
                    "description": "Default role to assign to a team member.\n"
                },
                "defaultTeam": {
                    "type": "boolean",
                    "description": "Whether to assign this team to a user by default.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description to assign to the team.\n"
                },
                "membersCanCreatePipelines": {
                    "type": "boolean",
                    "description": "Whether team members can create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy level to set the team too.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID for the team.\n"
                }
            },
            "required": [
                "defaultMemberRole",
                "defaultTeam",
                "name",
                "privacy",
                "slug",
                "uuid"
            ],
            "inputProperties": {
                "defaultMemberRole": {
                    "type": "string",
                    "description": "Default role to assign to a team member.\n"
                },
                "defaultTeam": {
                    "type": "boolean",
                    "description": "Whether to assign this team to a user by default.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description to assign to the team.\n"
                },
                "membersCanCreatePipelines": {
                    "type": "boolean",
                    "description": "Whether team members can create.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "The privacy level to set the team too.\n"
                }
            },
            "requiredInputs": [
                "defaultMemberRole",
                "defaultTeam",
                "privacy"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "defaultMemberRole": {
                        "type": "string",
                        "description": "Default role to assign to a team member.\n"
                    },
                    "defaultTeam": {
                        "type": "boolean",
                        "description": "Whether to assign this team to a user by default.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description to assign to the team.\n"
                    },
                    "membersCanCreatePipelines": {
                        "type": "boolean",
                        "description": "Whether team members can create.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "privacy": {
                        "type": "string",
                        "description": "The privacy level to set the team too.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The name of the team.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID for the team.\n"
                    }
                },
                "type": "object"
            }
        },
        "buildkite:index/teamMember:TeamMember": {
            "description": "## # Resource: team_member\n\nThis resource allows manage team membership for existing organization users.\n\nThe user must already be part of the organization to which you are managing team membership. This will not invite a new user to the organization.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines/permissions\n\nNote: You must first enable Teams on your organization.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst team = new buildkite.Team(\"team\", {\n    privacy: \"VISIBLE\",\n    defaultTeam: true,\n    defaultMemberRole: \"MEMBER\",\n});\nconst aSmith = new buildkite.TeamMember(\"aSmith\", {\n    role: \"MEMBER\",\n    teamId: team.id,\n    userId: \"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\",\n});\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nteam = buildkite.Team(\"team\",\n    privacy=\"VISIBLE\",\n    default_team=True,\n    default_member_role=\"MEMBER\")\na_smith = buildkite.TeamMember(\"aSmith\",\n    role=\"MEMBER\",\n    team_id=team.id,\n    user_id=\"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\")\n```\n```csharp\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var team = new Buildkite.Team(\"team\", new Buildkite.TeamArgs\n        {\n            Privacy = \"VISIBLE\",\n            DefaultTeam = true,\n            DefaultMemberRole = \"MEMBER\",\n        });\n        var aSmith = new Buildkite.TeamMember(\"aSmith\", new Buildkite.TeamMemberArgs\n        {\n            Role = \"MEMBER\",\n            TeamId = team.Id,\n            UserId = \"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tteam, err := buildkite.NewTeam(ctx, \"team\", \u0026buildkite.TeamArgs{\n\t\t\tPrivacy:           pulumi.String(\"VISIBLE\"),\n\t\t\tDefaultTeam:       pulumi.Bool(true),\n\t\t\tDefaultMemberRole: pulumi.String(\"MEMBER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = buildkite.NewTeamMember(ctx, \"aSmith\", \u0026buildkite.TeamMemberArgs{\n\t\t\tRole:   pulumi.String(\"MEMBER\"),\n\t\t\tTeamId: team.ID(),\n\t\t\tUserId: pulumi.String(\"VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ==\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTeam members can be imported using the GraphQL ID of the membership. Note this is different to the ID of the user.\n\n```sh\n $ pulumi import buildkite:index/teamMember:TeamMember a_smith VGVhbU1lbWJlci0tLTVlZDEyMmY2LTM2NjQtNDI1MS04YzMwLTc4NjRiMDdiZDQ4Zg==\n```\n\n To find the ID of a team member you are trying to import you can use the GraphQL snippet below. A link to this snippet can also be found at https://buildkite.com/user/graphql/console/c6a2cc65-dc59-49df-95c6-7167b68dbd5d. You will need fo fill in the organization slug and search terms for teams and members. Both search terms work on the name of the associated object. graphql query {\n\n organization(slug\"\") {\n\n\n\n teams(first2, search\"\") {\n\n\n\n\n\n edges {\n\n\n\n\n\n\n\n node {\n\n\n\n\n\n\n\n\n\n members(first2, search\"\") {\n\n\n\n\n\n\n\n\n\n\n\n edges {\n\n\n\n\n\n\n\n\n\n\n\n\n\n node {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n id\n\n\n\n\n\n\n\n\n\n\n\n\n\n }\n\n\n\n\n\n\n\n\n\n\n\n }\n\n\n\n\n\n\n\n\n\n }\n\n\n\n\n\n\n\n }\n\n\n\n\n\n }\n\n\n\n }\n\n } } ",
            "properties": {
                "role": {
                    "type": "string",
                    "description": "Either MEMBER or MAINTAINER.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GraphQL ID of the team to add to/remove from.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The GraphQL ID of the user to add/remove.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "The UUID for the team membership.\n"
                }
            },
            "required": [
                "role",
                "teamId",
                "userId",
                "uuid"
            ],
            "inputProperties": {
                "role": {
                    "type": "string",
                    "description": "Either MEMBER or MAINTAINER.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The GraphQL ID of the team to add to/remove from.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The GraphQL ID of the user to add/remove.\n"
                }
            },
            "requiredInputs": [
                "role",
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamMember resources.\n",
                "properties": {
                    "role": {
                        "type": "string",
                        "description": "Either MEMBER or MAINTAINER.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The GraphQL ID of the team to add to/remove from.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "The GraphQL ID of the user to add/remove.\n"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "The UUID for the team membership.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "buildkite:index/getMetadata:getMetadata": {
            "outputs": {
                "description": "A collection of values returned by getMetadata.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "webhookIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of strings, each one an IP address (x.x.x.x) or CIDR address (x.x.x.x/32) that Buildkite may use to send webhooks and other external requests.\n"
                    }
                },
                "type": "object",
                "required": [
                    "webhookIps",
                    "id"
                ]
            }
        },
        "buildkite:index/getPipeline:getPipeline": {
            "description": "## # Data Source: pipeline\n\nUse this data source to look up properties on a specific pipeline. This is\nparticularly useful for looking up the webhook URL for each pipeline.\n\nBuildkite Documentation: https://buildkite.com/docs/pipelines\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as buildkite from \"@pulumi/buildkite\";\n\nconst repo2 = pulumi.output(buildkite.getPipeline({\n    slug: \"repo2\",\n}));\n```\n```python\nimport pulumi\nimport pulumi_buildkite as buildkite\n\nrepo2 = buildkite.get_pipeline(slug=\"repo2\")\n```\n```csharp\nusing Pulumi;\nusing Buildkite = Pulumi.Buildkite;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var repo2 = Output.Create(Buildkite.GetPipeline.InvokeAsync(new Buildkite.GetPipelineArgs\n        {\n            Slug = \"repo2\",\n        }));\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := buildkite.LookupPipeline(ctx, \u0026GetPipelineArgs{\n\t\t\tSlug: \"repo2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getPipeline.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "The slug of the pipeline, available in the URL of the pipeline on buildkite.com\n"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPipeline.\n",
                "properties": {
                    "defaultBranch": {
                        "type": "string",
                        "description": "The default branch to prefill when new builds are created or triggered, usually main or master but can be anything.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the pipeline.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "The git URL of the repository.\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "webhookUrl": {
                        "type": "string",
                        "description": "The default branch to prefill when new builds are created or triggered.\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultBranch",
                    "description",
                    "name",
                    "repository",
                    "slug",
                    "webhookUrl",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-buildkite/sdk/go/buildkite"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing buildkite cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/buildkite/terraform-provider-buildkite)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-buildkite` repo](https://github.com/pulumi/pulumi-buildkite/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`buildkite/terraform-provider-buildkite` repo](https://github.com/buildkite/terraform-provider-buildkite/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/buildkite/terraform-provider-buildkite)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-buildkite` repo](https://github.com/pulumi/pulumi-buildkite/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`buildkite/terraform-provider-buildkite` repo](https://github.com/buildkite/terraform-provider-buildkite/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}