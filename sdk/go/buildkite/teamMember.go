// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package buildkite

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: teamMember
//
// This resource allows manage team membership for existing organization users.
//
// The user must already be part of the organization to which you are managing team membership. This will not invite a new user to the organization.
//
// Buildkite Documentation: https://buildkite.com/docs/pipelines/permissions
//
// Note: You must first enable Teams on your organization.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-buildkite/sdk/go/buildkite"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		team, err := buildkite.NewTeam(ctx, "team", &buildkite.TeamArgs{
// 			Privacy:           pulumi.String("VISIBLE"),
// 			DefaultTeam:       pulumi.Bool(true),
// 			DefaultMemberRole: pulumi.String("MEMBER"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = buildkite.NewTeamMember(ctx, "aSmith", &buildkite.TeamMemberArgs{
// 			Role:   pulumi.String("MEMBER"),
// 			TeamId: team.ID(),
// 			UserId: pulumi.String("VXNlci0tLWRlOTdmMjBiLWJkZmMtNGNjOC1hOTcwLTY1ODNiZTk2ZGEyYQ=="),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Team members can be imported using the GraphQL ID of the membership. Note this is different to the ID of the user.
//
// ```sh
//  $ pulumi import buildkite:index/teamMember:TeamMember a_smith VGVhbU1lbWJlci0tLTVlZDEyMmY2LTM2NjQtNDI1MS04YzMwLTc4NjRiMDdiZDQ4Zg==
// ```
//
//  To find the ID of a team member you are trying to import you can use the GraphQL snippet below. A link to this snippet can also be found at https://buildkite.com/user/graphql/console/c6a2cc65-dc59-49df-95c6-7167b68dbd5d. You will need fo fill in the organization slug and search terms for teams and members. Both search terms work on the name of the associated object. graphql query {
//
//  organization(slug"") {
//
//  teams(first2, search"") {
//
//  edges {
//
//  node {
//
//  members(first2, search"") {
//
//  edges {
//
//  node {
//
//  id
//
//  }
//
//  }
//
//  }
//
//  }
//
//  }
//
//  }
//
//  } }
type TeamMember struct {
	pulumi.CustomResourceState

	// Either MEMBER or MAINTAINER.
	Role pulumi.StringOutput `pulumi:"role"`
	// The GraphQL ID of the team to add to/remove from.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
	// The GraphQL ID of the user to add/remove.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The UUID for the team membership.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewTeamMember registers a new resource with the given unique name, arguments, and options.
func NewTeamMember(ctx *pulumi.Context,
	name string, args *TeamMemberArgs, opts ...pulumi.ResourceOption) (*TeamMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource TeamMember
	err := ctx.RegisterResource("buildkite:index/teamMember:TeamMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamMember gets an existing TeamMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamMemberState, opts ...pulumi.ResourceOption) (*TeamMember, error) {
	var resource TeamMember
	err := ctx.ReadResource("buildkite:index/teamMember:TeamMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamMember resources.
type teamMemberState struct {
	// Either MEMBER or MAINTAINER.
	Role *string `pulumi:"role"`
	// The GraphQL ID of the team to add to/remove from.
	TeamId *string `pulumi:"teamId"`
	// The GraphQL ID of the user to add/remove.
	UserId *string `pulumi:"userId"`
	// The UUID for the team membership.
	Uuid *string `pulumi:"uuid"`
}

type TeamMemberState struct {
	// Either MEMBER or MAINTAINER.
	Role pulumi.StringPtrInput
	// The GraphQL ID of the team to add to/remove from.
	TeamId pulumi.StringPtrInput
	// The GraphQL ID of the user to add/remove.
	UserId pulumi.StringPtrInput
	// The UUID for the team membership.
	Uuid pulumi.StringPtrInput
}

func (TeamMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamMemberState)(nil)).Elem()
}

type teamMemberArgs struct {
	// Either MEMBER or MAINTAINER.
	Role string `pulumi:"role"`
	// The GraphQL ID of the team to add to/remove from.
	TeamId string `pulumi:"teamId"`
	// The GraphQL ID of the user to add/remove.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a TeamMember resource.
type TeamMemberArgs struct {
	// Either MEMBER or MAINTAINER.
	Role pulumi.StringInput
	// The GraphQL ID of the team to add to/remove from.
	TeamId pulumi.StringInput
	// The GraphQL ID of the user to add/remove.
	UserId pulumi.StringInput
}

func (TeamMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamMemberArgs)(nil)).Elem()
}

type TeamMemberInput interface {
	pulumi.Input

	ToTeamMemberOutput() TeamMemberOutput
	ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput
}

func (*TeamMember) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamMember)(nil)).Elem()
}

func (i *TeamMember) ToTeamMemberOutput() TeamMemberOutput {
	return i.ToTeamMemberOutputWithContext(context.Background())
}

func (i *TeamMember) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberOutput)
}

// TeamMemberArrayInput is an input type that accepts TeamMemberArray and TeamMemberArrayOutput values.
// You can construct a concrete instance of `TeamMemberArrayInput` via:
//
//          TeamMemberArray{ TeamMemberArgs{...} }
type TeamMemberArrayInput interface {
	pulumi.Input

	ToTeamMemberArrayOutput() TeamMemberArrayOutput
	ToTeamMemberArrayOutputWithContext(context.Context) TeamMemberArrayOutput
}

type TeamMemberArray []TeamMemberInput

func (TeamMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamMember)(nil)).Elem()
}

func (i TeamMemberArray) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return i.ToTeamMemberArrayOutputWithContext(context.Background())
}

func (i TeamMemberArray) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberArrayOutput)
}

// TeamMemberMapInput is an input type that accepts TeamMemberMap and TeamMemberMapOutput values.
// You can construct a concrete instance of `TeamMemberMapInput` via:
//
//          TeamMemberMap{ "key": TeamMemberArgs{...} }
type TeamMemberMapInput interface {
	pulumi.Input

	ToTeamMemberMapOutput() TeamMemberMapOutput
	ToTeamMemberMapOutputWithContext(context.Context) TeamMemberMapOutput
}

type TeamMemberMap map[string]TeamMemberInput

func (TeamMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamMember)(nil)).Elem()
}

func (i TeamMemberMap) ToTeamMemberMapOutput() TeamMemberMapOutput {
	return i.ToTeamMemberMapOutputWithContext(context.Background())
}

func (i TeamMemberMap) ToTeamMemberMapOutputWithContext(ctx context.Context) TeamMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMemberMapOutput)
}

type TeamMemberOutput struct{ *pulumi.OutputState }

func (TeamMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamMember)(nil)).Elem()
}

func (o TeamMemberOutput) ToTeamMemberOutput() TeamMemberOutput {
	return o
}

func (o TeamMemberOutput) ToTeamMemberOutputWithContext(ctx context.Context) TeamMemberOutput {
	return o
}

type TeamMemberArrayOutput struct{ *pulumi.OutputState }

func (TeamMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamMember)(nil)).Elem()
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutput() TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) ToTeamMemberArrayOutputWithContext(ctx context.Context) TeamMemberArrayOutput {
	return o
}

func (o TeamMemberArrayOutput) Index(i pulumi.IntInput) TeamMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamMember {
		return vs[0].([]*TeamMember)[vs[1].(int)]
	}).(TeamMemberOutput)
}

type TeamMemberMapOutput struct{ *pulumi.OutputState }

func (TeamMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamMember)(nil)).Elem()
}

func (o TeamMemberMapOutput) ToTeamMemberMapOutput() TeamMemberMapOutput {
	return o
}

func (o TeamMemberMapOutput) ToTeamMemberMapOutputWithContext(ctx context.Context) TeamMemberMapOutput {
	return o
}

func (o TeamMemberMapOutput) MapIndex(k pulumi.StringInput) TeamMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamMember {
		return vs[0].(map[string]*TeamMember)[vs[1].(string)]
	}).(TeamMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberInput)(nil)).Elem(), &TeamMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberArrayInput)(nil)).Elem(), TeamMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMemberMapInput)(nil)).Elem(), TeamMemberMap{})
	pulumi.RegisterOutputType(TeamMemberOutput{})
	pulumi.RegisterOutputType(TeamMemberArrayOutput{})
	pulumi.RegisterOutputType(TeamMemberMapOutput{})
}
